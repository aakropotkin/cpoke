













  static inline void
lshowbits ( unsigned long ul ) {
  for ( int i = 8 * sizeof( unsigned long ) -1; i >= 0; i-- )
    printf( "%lu", ( ul >> i ) & 1 );
  putchar( '\n' );
}

  static inline void
ishowbits ( unsigned int ui ) {
  for ( int j = 8 * sizeof( unsigned int ) -1; j >= 0; j-- )
    printf( "%u", ( ui >> j ) & 1 );
  putchar( '\n' );
}
  static unsigned char
log10_u32( unsigned int x )
{
  return ( x >= 1000000000 ) ? 10 :
         ( x >= 100000000 ) ? 9 :
         ( x >= 10000000 ) ? 8 :
         ( x >= 1000000 ) ? 7 :
         ( x >= 100000 ) ? 6 :
         ( x >= 10000 ) ? 5 :
         ( x >= 1000 ) ? 4 :
         ( x >= 100 ) ? 3 :
         ( x >= 10 ) ? 2 :
                                1;
}





  static int
atoin( const char * str, unsigned char n )
{
  if ( n > 11 ) return 0;
  char buffer[12] = {
      '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0'
    };
  unsigned char i = 0;
  while ( ( ( ( '0' <= *str ) && ( *str <= '9' ) ) || ( *str == '-' ) )
          && ( i < n )
        ) buffer[i++] = *str++;
  return atoi( buffer );
}





  static unsigned int
atouin( const char * str, unsigned char n )
{
  if ( n > 10 ) return 0;
  char buffer[11] = {
    '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0'
  };
  unsigned char i = 0;
  while ( ( '0' <= *str ) && ( *str <= '9' ) && ( i < n ) )
    buffer[i++] = *str++;
  return (unsigned int) atol( buffer );
}





  static char
atocn( const char * str, unsigned char n )
{
  if ( n > 4 ) return 0;
  char buffer[5] = { '\0', '\0', '\0', '\0', '\0' };
  unsigned char i = 0;
  while ( ( ( ( '0' <= *str ) && ( *str <= '9' ) ) || ( *str == '-' ) )
          && ( i < n )
        ) buffer[i++] = *str++;
  return (char) atoi( buffer );
}





  static unsigned char
atoucn( const char * str, unsigned char n )
{
  if ( n > 3 ) return 0;
  char buffer[4] = { '\0', '\0', '\0', '\0' };
  unsigned char i = 0;
  while ( ( '0' <= *str ) && ( *str <= '9' ) && ( i < n ) )
    buffer[i++] = *str++;
  return (unsigned char) atoi( buffer );
}







struct store_s;




typedef enum {
  STORE_NULL_STATUS,
  STORE_SUCCESS,
  STORE_ERROR_FAIL,
  STORE_ERROR_BAD_VALUE,
  STORE_ERROR_NOMEM,
  STORE_ERROR_NOT_FOUND,
  STORE_ERROR_NOT_WRITABLE,
  STORE_ERROR_NOT_DEFINED
} store_status_t;




typedef enum { SF_NONE , SF_WRITABLE , SF_THREAD_SAFE , SF_OFFICIAL_DATA , SF_CUSTOM_DATA , SF_EXPORTABLE , SF_STANDARD_KEY , SF_TYPED , SF_GET_STRING , SF_GET_TYPED_STRING } store_flag_t; typedef enum { SF_NONE_M = ( ( ( !! ( SF_NONE ) ) << ( SF_NONE ) ) >> 1 ) , SF_WRITABLE_M = ( ( ( !! ( SF_WRITABLE ) ) << ( SF_WRITABLE ) ) >> 1 ) , SF_THREAD_SAFE_M = ( ( ( !! ( SF_THREAD_SAFE ) ) << ( SF_THREAD_SAFE ) ) >> 1 ) , SF_OFFICIAL_DATA_M = ( ( ( !! ( SF_OFFICIAL_DATA ) ) << ( SF_OFFICIAL_DATA ) ) >> 1 ) , SF_CUSTOM_DATA_M = ( ( ( !! ( SF_CUSTOM_DATA ) ) << ( SF_CUSTOM_DATA ) ) >> 1 ) , SF_EXPORTABLE_M = ( ( ( !! ( SF_EXPORTABLE ) ) << ( SF_EXPORTABLE ) ) >> 1 ) , SF_STANDARD_KEY_M = ( ( ( !! ( SF_STANDARD_KEY ) ) << ( SF_STANDARD_KEY ) ) >> 1 ) , SF_TYPED_M = ( ( ( !! ( SF_TYPED ) ) << ( SF_TYPED ) ) >> 1 ) , SF_GET_STRING_M = ( ( ( !! ( SF_GET_STRING ) ) << ( SF_GET_STRING ) ) >> 1 ) , SF_GET_TYPED_STRING_M = ( ( ( !! ( SF_GET_TYPED_STRING ) ) << ( SF_GET_TYPED_STRING ) ) >> 1 ) } store_flag_mask_t; typedef union { store_flag_mask_t mask; struct { unsigned int SF_WRITABLE : 1 ; unsigned int SF_THREAD_SAFE : 1 ; unsigned int SF_OFFICIAL_DATA : 1 ; unsigned int SF_CUSTOM_DATA : 1 ; unsigned int SF_EXPORTABLE : 1 ; unsigned int SF_STANDARD_KEY : 1 ; unsigned int SF_TYPED : 1 ; unsigned int SF_GET_STRING : 1 ; unsigned int SF_GET_TYPED_STRING : 1; }; } store_flag_flags_t;
typedef enum {
  STORE_UNKNOWN,
  STORE_STRING,
  STORE_NUM,
  STORE_FUNCTION,
  STORE_POKEDEX,
  STORE_MOVE,
  STORE_ROSTER,
  STORE_CUP,
  STORE_PVP_POKEMON,
  STORE_PVP_TEAM,
  STORE_PVP_BATTLE,
  STORE_PVP_BATTLE_LOG,
  STORE_PVP_POKEMON_RANKING,
  STORE_PVP_MOVE_RANKING,
  STORE_ANALYTICS,
  STORE_CUSTOM
} store_type_t;

_Static_assert( sizeof( store_type_t ) == 1, "store_type_t must be 1 byte" );




typedef enum {
  SS_UNKNOWN, SS_C, SS_JSON, SS_SQL
} store_sink_t;

static const char * STORE_SINK_NAMES[] = {
  "SS_UNKNOWN", "SS_C", "SS_JSON", "SS_SQL"
};




struct store_key_s {
  store_type_t key_type;
  store_type_t val_type;
  union {
    uint32_t data_f;
    struct {
      union { uint16_t data_h0; struct { uint8_t data_q0, data_q1; }; };
      union { uint16_t data_h1; struct { uint8_t data_q2, data_q3; }; };
    };
  } ;
};
typedef struct store_key_s store_key_t;
typedef bool ( * store_has_fn )( struct store_s *, store_key_t );
typedef int ( * store_get_fn )( struct store_s *, store_key_t, void ** );
typedef int ( * store_init_fn )( struct store_s *, void * );
typedef void ( * store_free_fn )( struct store_s * );


typedef int ( * store_get_str_fn )( struct store_s *, const char *, void ** );

typedef int ( * store_get_str_t_fn )( struct store_s *,
                                       store_type_t,
                                       const char *,
                                       void **
                                     );

typedef int ( * store_add_fn )( struct store_s *, store_key_t, void * );
typedef int ( * store_set_fn )( struct store_s *, store_key_t, void * );

typedef int ( * store_export_fn )( struct store_s *, store_sink_t, void * );




struct store_s {
  char * name;
  store_flag_mask_t flags;
  store_has_fn has;
  store_get_fn get;
  store_get_str_fn get_str;
  store_get_str_t_fn get_str_t;
  store_add_fn add;
  store_set_fn set;
  store_export_fn export;
  store_init_fn init;
  store_free_fn free;
  void * aux;
};

typedef struct store_s store_t;







typedef struct UT_hash_bucket {
   struct UT_hash_handle *hh_head;
   unsigned count;
   unsigned expand_mult;

} UT_hash_bucket;





typedef struct UT_hash_table {
   UT_hash_bucket *buckets;
   unsigned num_buckets, log2_num_buckets;
   unsigned num_items;
   struct UT_hash_handle *tail;
   ptrdiff_t hho;



   unsigned ideal_chain_maxlen;




   unsigned nonideal_items;







   unsigned ineff_expands, noexpand;

   uint32_t signature;






} UT_hash_table;

typedef struct UT_hash_handle {
   struct UT_hash_table *tbl;
   void *prev;
   void *next;
   struct UT_hash_handle *hh_prev;
   struct UT_hash_handle *hh_next;
   void *key;
   unsigned keylen;
   unsigned hashv;
} UT_hash_handle;
static const UT_hash_handle HH_NULL = {
  NULL, NULL, NULL, NULL, NULL, NULL, 0, 0
};








static const float DAMAGE_MODIFIERS[18][19][18] =
{ { { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 2.560000, 2.560000, 1.000000, 0.390625, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000 }
  , { 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.600000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 0.390625, 1.600000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000, 0.390625, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000 }
  , { 0.625000, 0.625000, 0.390625, 1.000000, 1.000000, 0.390625, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.600000, 1.000000 }
  , { 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 2.560000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.000000, 0.390625, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 2.560000, 0.625000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.390625, 1.600000, 1.600000, 1.000000, 0.390625, 0.244141, 1.600000, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000 }
  , { 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 0.244141, 1.600000, 1.600000, 1.600000, 0.625000, 0.625000, 1.000000, 0.390625, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 2.560000, 2.560000, 1.000000, 0.390625, 0.390625, 1.600000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.600000, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 2.560000, 1.600000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 0.390625, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 0.390625, 1.600000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 1.000000 }
  , { 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625, 1.600000, 1.600000, 1.600000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 1.600000 }
  , { 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 2.560000, 1.000000, 1.000000, 0.390625, 1.000000, 0.625000, 0.625000, 0.390625, 0.625000, 1.000000, 0.625000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000 }
  }
, { { 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000 }
  , { 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.600000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 0.390625, 1.600000, 1.000000, 1.000000 }
  , { 2.560000, 0.390625, 1.000000, 1.000000, 2.560000, 2.560000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.152588, 1.000000, 1.000000, 1.000000 }
  , { 1.600000, 0.625000, 1.600000, 0.625000, 2.560000, 1.600000, 0.625000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 0.625000 }
  , { 1.600000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 0.625000, 1.000000 }
  , { 1.000000, 0.390625, 0.390625, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.390625, 1.000000, 1.600000, 1.000000 }
  , { 1.000000, 0.390625, 1.000000, 1.000000, 2.560000, 1.600000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000 }
  , { 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 0.625000, 0.625000, 1.600000, 0.625000, 1.000000, 1.000000, 0.390625, 1.600000, 0.625000, 1.600000 }
  , { 1.000000, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 0.390625, 1.600000, 1.000000, 1.000000, 0.390625, 1.600000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000 }
  , { 2.560000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.600000, 1.600000, 0.625000, 0.625000, 0.625000, 1.600000, 1.000000, 1.600000, 0.390625, 1.000000, 1.000000, 0.625000 }
  , { 1.600000, 0.625000, 1.000000, 0.390625, 1.600000, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 1.600000 }
  , { 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 2.560000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.390625, 1.600000, 1.600000, 1.000000 }
  , { 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 2.560000, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000 }
  , { 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000 }
  , { 2.560000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 1.000000 }
  , { 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 2.560000, 0.625000, 0.625000, 0.625000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 0.390625, 1.000000, 1.600000, 1.600000 }
  , { 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 2.560000, 1.600000, 0.625000, 0.625000, 0.625000, 1.600000, 0.625000, 0.625000, 0.390625, 0.244141, 0.625000, 0.625000, 1.000000 }
  , { 1.600000, 0.625000, 1.000000, 1.600000, 1.600000, 1.600000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 0.390625, 1.000000, 0.625000, 0.625000 }
  }
, { { 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000 }
  , { 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000, 0.390625, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000 }
  , { 1.600000, 0.625000, 1.600000, 0.625000, 2.560000, 1.600000, 0.625000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 0.625000 }
  , { 1.000000, 1.000000, 2.560000, 0.390625, 2.560000, 1.000000, 0.390625, 1.000000, 1.000000, 0.390625, 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625 }
  , { 1.000000, 1.000000, 1.600000, 0.390625, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000 }
  , { 0.625000, 0.625000, 0.625000, 0.625000, 1.600000, 0.625000, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 0.625000 }
  , { 0.625000, 0.625000, 1.600000, 0.625000, 2.560000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 0.625000 }
  , { 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 0.390625, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000 }
  , { 0.625000, 1.000000, 1.600000, 1.000000, 1.600000, 0.625000, 0.625000, 1.000000, 1.000000, 0.390625, 0.390625, 2.560000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000 }
  , { 0.625000, 1.600000, 1.600000, 0.625000, 1.600000, 0.390625, 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 1.600000, 0.390625, 0.625000, 1.000000, 1.000000, 1.000000, 0.625000 }
  , { 1.600000, 1.000000, 1.600000, 0.390625, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 0.390625, 0.625000, 2.560000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625 }
  , { 1.000000, 1.000000, 1.600000, 0.244141, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 0.625000 }
  , { 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 1.600000, 0.625000, 1.000000, 0.390625, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000 }
  , { 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 0.390625, 1.600000, 1.600000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000 }
  , { 1.600000, 1.600000, 1.600000, 0.625000, 1.600000, 0.625000, 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000 }
  , { 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 1.600000, 0.390625, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 0.390625, 1.600000, 1.000000, 0.625000, 0.390625, 0.625000, 0.625000, 0.625000, 0.625000 }
  , { 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.390625 }
  }
, { { 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000 }
  , { 1.600000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 0.625000, 1.000000 }
  , { 1.000000, 1.000000, 1.600000, 0.390625, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000 }
  , { 0.625000, 0.625000, 0.390625, 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000 }
  , { 0.625000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 0.625000, 0.625000, 1.000000, 0.625000, 2.560000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 0.390625, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000 }
  , { 0.625000, 1.600000, 1.000000, 0.625000, 1.000000, 0.390625, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 0.390625, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000 }
  , { 1.600000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.600000, 1.600000, 1.000000, 0.625000, 1.000000, 0.625000, 0.625000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 0.625000, 0.390625, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 2.560000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 1.000000 }
  , { 1.600000, 1.600000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 0.625000, 0.390625, 1.000000, 1.600000, 2.560000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000 }
  , { 0.625000, 1.000000, 0.625000, 0.625000, 0.625000, 1.600000, 1.600000, 0.390625, 1.000000, 0.625000, 2.560000, 0.625000, 0.625000, 0.390625, 0.625000, 0.625000, 0.390625, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000 }
  }
, { { 0.625000, 0.625000, 0.390625, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000 }
  , { 0.625000, 0.625000, 0.390625, 1.000000, 1.000000, 0.390625, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.600000, 1.000000 }
  , { 1.000000, 0.390625, 0.390625, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.390625, 1.000000, 1.600000, 1.000000 }
  , { 0.625000, 0.625000, 0.625000, 0.625000, 1.600000, 0.625000, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 0.625000 }
  , { 0.625000, 0.625000, 0.390625, 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000 }
  , { 0.390625, 0.390625, 0.152588, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 2.560000, 1.000000 }
  , { 0.390625, 0.390625, 0.390625, 1.000000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 0.625000, 1.600000, 1.000000 }
  , { 0.390625, 0.625000, 0.390625, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.600000 }
  , { 0.390625, 0.625000, 0.390625, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 0.625000, 0.390625, 1.600000, 1.000000, 1.600000, 1.000000, 1.600000, 1.600000, 1.000000 }
  , { 0.390625, 1.000000, 0.390625, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000 }
  , { 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.600000, 1.000000, 2.560000, 1.000000, 1.000000, 1.600000, 0.625000 }
  , { 0.625000, 0.625000, 0.390625, 0.390625, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.600000 }
  , { 0.625000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.600000, 2.560000, 1.000000 }
  , { 0.625000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000 }
  , { 0.390625, 0.625000, 0.390625, 1.000000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000 }
  , { 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000 }
  , { 0.625000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 2.560000, 1.600000 }
  , { 0.390625, 0.625000, 0.244141, 1.000000, 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 0.625000, 1.600000, 0.625000, 0.625000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000 }
  , { 0.625000, 0.625000, 0.390625, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000 }
  }
, { { 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000 }
  , { 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 2.560000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000 }
  , { 1.000000, 0.390625, 1.000000, 1.000000, 2.560000, 1.600000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000 }
  , { 0.625000, 0.625000, 1.600000, 0.625000, 2.560000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 0.625000 }
  , { 0.625000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000, 1.000000 }
  , { 0.390625, 0.390625, 0.390625, 1.000000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 0.625000, 1.600000, 1.000000 }
  , { 0.390625, 0.390625, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 0.390625, 1.000000, 1.000000 }
  , { 0.390625, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000, 1.600000 }
  , { 0.390625, 0.625000, 1.000000, 1.600000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000, 0.625000, 0.390625, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000 }
  , { 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 0.390625, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 1.600000, 0.625000, 1.000000, 1.000000 }
  , { 1.000000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 2.560000, 1.000000, 0.625000, 0.625000, 1.600000, 1.000000, 1.600000, 1.600000, 0.625000, 1.000000, 0.625000 }
  , { 0.625000, 0.625000, 1.000000, 0.390625, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 1.600000, 0.390625, 1.000000, 1.600000 }
  , { 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000 }
  , { 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.600000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000 }
  , { 0.390625, 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000, 2.560000, 0.625000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000 }
  , { 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.600000, 0.625000, 1.600000, 1.600000 }
  , { 0.390625, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 0.625000, 0.390625, 1.000000, 0.390625, 0.625000, 1.000000 }
  , { 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000, 0.625000 }
  }
, { { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.000000, 0.390625, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 2.560000, 0.625000, 1.600000 }
  , { 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 0.625000, 0.625000, 1.600000, 0.625000, 1.000000, 1.000000, 0.390625, 1.600000, 0.625000, 1.600000 }
  , { 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 0.390625, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 0.625000, 0.625000, 1.000000, 0.625000, 2.560000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 0.390625, 1.600000 }
  , { 0.390625, 0.625000, 0.390625, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.600000 }
  , { 0.390625, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000, 1.600000 }
  , { 0.390625, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 0.390625, 1.000000, 1.000000, 0.390625, 2.560000, 0.390625, 1.000000, 1.000000, 1.000000, 2.560000, 0.390625, 2.560000 }
  , { 0.390625, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 0.390625, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 0.625000, 1.600000 }
  , { 0.390625, 1.600000, 1.000000, 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 1.600000, 0.625000, 1.600000, 0.625000, 0.390625, 0.625000, 1.000000, 1.600000, 0.625000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 0.625000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 0.390625, 0.625000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 2.560000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 0.390625, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 1.000000, 0.390625, 0.625000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.600000 }
  , { 0.390625, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 0.625000, 1.000000, 1.000000, 0.390625, 2.560000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 0.625000, 1.600000 }
  , { 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 1.600000, 0.625000, 1.600000, 0.625000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 0.390625, 0.625000, 1.000000, 1.000000, 2.560000, 0.625000, 0.625000, 0.625000, 1.000000, 1.600000, 1.000000, 2.560000 }
  , { 0.390625, 1.000000, 0.625000, 1.000000, 0.390625, 1.600000, 1.000000, 0.625000, 1.000000, 0.390625, 2.560000, 0.390625, 0.625000, 0.390625, 0.625000, 1.000000, 0.390625, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 0.390625, 1.000000 }
  }
, { { 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 0.390625, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.390625, 1.600000, 1.600000, 1.000000, 0.390625, 0.244141, 1.600000, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000 }
  , { 1.000000, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 0.390625, 1.600000, 1.000000, 1.000000, 0.390625, 1.600000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 1.600000, 1.000000, 1.600000, 0.625000, 0.625000, 1.000000, 1.000000, 0.390625, 0.390625, 2.560000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000 }
  , { 0.390625, 0.625000, 0.390625, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 0.625000, 0.390625, 1.600000, 1.000000, 1.600000, 1.000000, 1.600000, 1.600000, 1.000000 }
  , { 0.390625, 0.625000, 1.000000, 1.600000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000, 0.625000, 0.390625, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000 }
  , { 0.390625, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 0.390625, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 0.625000, 1.600000 }
  , { 0.390625, 1.000000, 1.000000, 2.560000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 0.390625, 0.152588, 2.560000, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000 }
  , { 0.390625, 1.600000, 1.000000, 1.600000, 1.000000, 0.244141, 1.000000, 1.000000, 1.600000, 0.625000, 0.390625, 1.600000, 0.390625, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 0.390625, 0.244141, 2.560000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000 }
  , { 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 2.560000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.600000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 0.390625, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 0.390625, 1.000000, 1.000000, 1.600000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 1.600000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 1.000000 }
  , { 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.600000, 0.625000, 0.390625, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 1.600000 }
  , { 0.390625, 1.000000, 0.625000, 1.600000, 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 0.390625, 0.625000, 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 0.625000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 2.560000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000 }
  }
, { { 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000 }
  , { 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 0.244141, 1.600000, 1.600000, 1.600000, 0.625000, 0.625000, 1.000000, 0.390625, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000 }
  , { 0.625000, 1.600000, 1.600000, 0.625000, 1.600000, 0.390625, 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 1.600000, 0.390625, 0.625000, 1.000000, 1.000000, 1.000000, 0.625000 }
  , { 0.625000, 1.600000, 1.000000, 0.625000, 1.000000, 0.390625, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 0.390625, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000 }
  , { 0.390625, 1.000000, 0.390625, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000 }
  , { 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 0.390625, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 1.600000, 0.625000, 1.000000, 1.000000 }
  , { 0.390625, 1.600000, 1.000000, 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 1.600000, 0.625000, 1.600000, 0.625000, 0.390625, 0.625000, 1.000000, 1.600000, 0.625000, 1.600000 }
  , { 0.390625, 1.600000, 1.000000, 1.600000, 1.000000, 0.244141, 1.000000, 1.000000, 1.600000, 0.625000, 0.390625, 1.600000, 0.390625, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 0.390625, 2.560000, 1.000000, 1.000000, 1.000000, 0.152588, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 0.152588, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000 }
  , { 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 0.390625, 1.600000, 1.600000, 1.600000, 0.625000, 0.625000, 1.600000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000 }
  , { 0.625000, 1.600000, 1.000000, 0.390625, 1.000000, 0.390625, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.600000, 0.390625, 0.390625, 1.000000, 0.625000, 1.000000, 1.600000 }
  , { 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000 }
  , { 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000 }
  , { 0.390625, 1.600000, 1.000000, 1.000000, 0.625000, 0.244141, 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 1.000000, 0.390625, 0.390625, 1.600000, 1.000000, 1.000000, 1.000000 }
  , { 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000 }
  , { 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 1.600000, 1.600000, 1.600000, 1.000000, 0.244141, 0.390625, 1.000000, 1.000000, 1.600000, 1.600000 }
  , { 0.390625, 1.600000, 0.625000, 1.000000, 0.625000, 0.625000, 1.600000, 0.625000, 1.600000, 0.625000, 1.600000, 0.625000, 0.244141, 0.244141, 0.625000, 0.625000, 0.625000, 1.000000 }
  , { 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 0.390625, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 1.000000, 0.625000, 0.625000 }
  }
, { { 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000 }
  , { 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 2.560000, 2.560000, 1.000000, 0.390625, 0.390625, 1.600000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000 }
  , { 2.560000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.600000, 1.600000, 0.625000, 0.625000, 0.625000, 1.600000, 1.000000, 1.600000, 0.390625, 1.000000, 1.000000, 0.625000 }
  , { 1.600000, 1.000000, 1.600000, 0.390625, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 0.390625, 0.625000, 2.560000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625 }
  , { 1.600000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.625000 }
  , { 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.600000, 1.000000, 2.560000, 1.000000, 1.000000, 1.600000, 0.625000 }
  , { 1.000000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 2.560000, 1.000000, 0.625000, 0.625000, 1.600000, 1.000000, 1.600000, 1.600000, 0.625000, 1.000000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 0.625000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 0.390625, 0.244141, 2.560000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000 }
  , { 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 0.390625, 1.600000, 1.600000, 1.600000, 0.625000, 0.625000, 1.600000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000 }
  , { 2.560000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 2.560000, 2.560000, 1.000000, 0.390625, 0.390625, 2.560000, 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 0.390625 }
  , { 1.600000, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 0.625000, 2.560000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000 }
  , { 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 2.560000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.600000, 0.625000 }
  , { 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.600000, 1.600000, 0.390625, 0.625000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 1.600000, 1.600000, 1.000000, 0.390625, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000 }
  , { 2.560000, 1.600000, 1.000000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.600000, 0.625000, 0.625000, 1.600000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 0.625000 }
  , { 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000 }
  , { 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 1.600000, 2.560000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 0.625000, 0.625000, 0.625000 }
  , { 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.390625 }
  }
, { { 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000 }
  , { 1.600000, 0.625000, 1.000000, 0.390625, 1.600000, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 1.600000 }
  , { 1.000000, 1.000000, 1.600000, 0.244141, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.600000, 1.600000, 1.000000, 0.625000, 1.000000, 0.625000, 0.625000, 1.600000 }
  , { 0.625000, 0.625000, 0.390625, 0.390625, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.600000 }
  , { 0.625000, 0.625000, 1.000000, 0.390625, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 1.600000, 0.390625, 1.000000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 0.390625, 0.625000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 2.560000 }
  , { 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 2.560000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000 }
  , { 0.625000, 1.600000, 1.000000, 0.390625, 1.000000, 0.390625, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.600000, 0.390625, 0.390625, 1.000000, 0.625000, 1.000000, 1.600000 }
  , { 1.600000, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 0.625000, 2.560000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 0.152588, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 2.560000, 1.000000, 0.390625, 1.000000, 0.390625, 1.000000, 2.560000 }
  , { 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.600000, 1.000000, 1.000000, 0.390625, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 0.390625, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 0.390625, 1.600000, 0.625000, 1.000000, 1.600000 }
  , { 1.600000, 1.600000, 1.000000, 0.390625, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.600000, 0.625000, 0.625000, 1.000000, 2.560000, 1.600000, 1.600000, 0.625000, 0.390625, 1.000000, 0.625000, 1.600000, 2.560000 }
  , { 0.625000, 1.000000, 0.625000, 0.390625, 0.625000, 1.600000, 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000, 0.244141, 0.625000, 0.390625, 0.625000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 0.625000, 1.000000 }
  }
, { { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.600000, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 2.560000, 1.600000, 1.000000 }
  , { 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 2.560000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.390625, 1.600000, 1.600000, 1.000000 }
  , { 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 0.625000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.600000, 2.560000, 1.000000 }
  , { 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 0.390625, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.600000, 1.000000 }
  , { 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000 }
  , { 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 2.560000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.600000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 2.560000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 2.560000, 2.560000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.600000, 1.000000 }
  , { 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 0.625000, 1.000000, 1.600000, 1.600000, 0.625000, 0.625000, 0.625000, 1.000000, 1.600000, 2.560000, 1.600000 }
  , { 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 2.560000, 2.560000, 0.625000, 1.000000, 0.625000, 1.600000, 0.390625, 0.625000, 0.390625, 0.625000, 1.000000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000 }
  }
, { { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 0.390625, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 2.560000, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 1.600000, 0.625000, 1.000000, 0.390625, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 0.625000, 0.390625, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000 }
  , { 0.625000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000 }
  , { 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.600000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 1.000000, 0.390625, 0.625000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 0.390625, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000 }
  , { 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000 }
  , { 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.600000, 1.600000, 0.390625, 0.625000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.600000, 1.000000, 1.000000, 0.390625, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 0.152588, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000 }
  , { 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 0.625000, 0.625000, 0.390625, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000 }
  , { 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 2.560000, 1.600000, 0.625000, 0.390625, 0.625000, 1.600000, 0.625000, 0.625000, 0.390625, 0.625000, 0.625000, 0.625000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 0.625000, 1.000000, 0.390625, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000 }
  }
, { { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 0.390625, 1.600000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 1.000000 }
  , { 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 0.390625, 1.600000, 1.600000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000 }
  , { 0.625000, 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 2.560000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 1.000000 }
  , { 0.390625, 0.625000, 0.390625, 1.000000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000 }
  , { 0.390625, 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000, 2.560000, 0.625000, 1.000000, 1.000000 }
  , { 0.390625, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 0.625000, 1.000000, 1.000000, 0.390625, 2.560000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 0.625000, 1.600000 }
  , { 0.390625, 1.000000, 1.000000, 1.600000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 1.600000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000, 1.000000 }
  , { 0.390625, 1.600000, 1.000000, 1.000000, 0.625000, 0.244141, 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 1.000000, 0.390625, 0.390625, 1.600000, 1.000000, 1.000000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 1.600000, 1.600000, 1.000000, 0.390625, 1.000000, 1.600000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000 }
  , { 0.625000, 1.000000, 1.000000, 0.390625, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 0.390625, 1.600000, 0.625000, 1.000000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.600000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000, 1.000000 }
  , { 0.390625, 1.000000, 1.000000, 1.000000, 0.390625, 0.390625, 1.000000, 1.000000, 1.000000, 0.390625, 2.560000, 1.000000, 1.000000, 0.390625, 2.560000, 1.000000, 1.000000, 1.000000 }
  , { 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.390625, 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 2.560000, 1.000000, 0.625000, 0.390625, 1.600000, 1.000000, 1.600000, 1.600000 }
  , { 0.390625, 1.000000, 0.625000, 1.000000, 0.390625, 1.000000, 1.600000, 0.625000, 1.000000, 0.390625, 2.560000, 0.625000, 0.625000, 0.244141, 1.000000, 0.625000, 0.625000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 0.625000 }
  }
, { { 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000 }
  , { 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 0.390625, 1.600000, 1.600000, 1.600000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000 }
  , { 2.560000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 1.000000 }
  , { 1.600000, 1.600000, 1.600000, 0.625000, 1.600000, 0.625000, 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000 }
  , { 1.600000, 1.600000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000 }
  , { 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.600000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000 }
  , { 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 1.600000, 0.625000, 1.600000, 0.625000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 1.600000 }
  , { 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.600000, 0.625000, 0.390625, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 1.000000, 1.000000 }
  , { 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 0.244141, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000 }
  , { 2.560000, 1.600000, 1.000000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 1.600000, 0.625000, 0.625000, 1.600000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 0.625000 }
  , { 1.600000, 1.600000, 1.000000, 0.390625, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 1.600000 }
  , { 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.600000, 1.600000, 1.000000 }
  , { 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000 }
  , { 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.390625, 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000 }
  , { 2.560000, 2.560000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000 }
  , { 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.600000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000 }
  , { 1.000000, 1.600000, 0.625000, 1.000000, 0.625000, 1.000000, 1.600000, 0.625000, 1.600000, 0.625000, 1.600000, 0.625000, 0.625000, 0.390625, 0.390625, 0.625000, 0.625000, 1.000000 }
  , { 1.600000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 0.625000 }
  }
, { { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 1.600000 }
  , { 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 2.560000, 0.625000, 0.625000, 0.625000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 0.390625, 1.000000, 1.600000, 1.600000 }
  , { 1.000000, 1.000000, 1.600000, 0.625000, 1.600000, 1.600000, 0.390625, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 0.625000, 0.390625, 1.000000, 1.600000, 2.560000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000 }
  , { 0.625000, 0.625000, 0.390625, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 2.560000, 1.600000 }
  , { 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.600000, 0.625000, 1.600000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.600000, 0.390625, 0.625000, 1.000000, 1.000000, 2.560000, 0.625000, 0.625000, 0.625000, 1.000000, 1.600000, 1.000000, 2.560000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 1.600000 }
  , { 0.625000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 1.600000, 1.600000, 1.600000, 1.000000, 0.244141, 0.390625, 1.000000, 1.000000, 1.600000, 1.600000 }
  , { 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.600000, 0.625000, 0.625000, 1.000000, 2.560000, 1.600000, 1.600000, 0.625000, 0.390625, 1.000000, 0.625000, 1.600000, 2.560000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 0.625000, 1.000000, 1.600000, 1.600000, 0.625000, 0.625000, 0.625000, 1.000000, 1.600000, 2.560000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 0.625000, 0.625000, 0.390625, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000 }
  , { 0.625000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 2.560000, 1.000000, 0.625000, 0.390625, 1.600000, 1.000000, 1.600000, 1.600000 }
  , { 1.600000, 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.600000, 1.600000, 1.600000, 1.000000, 0.625000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 2.560000, 0.390625, 0.390625, 1.000000, 2.560000, 2.560000, 1.000000, 0.390625, 0.390625, 1.000000, 1.000000, 2.560000, 2.560000 }
  , { 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 2.560000, 1.000000, 0.390625, 1.000000, 1.000000, 2.560000, 0.625000, 0.390625, 0.244141, 0.625000, 0.625000, 1.000000, 1.600000 }
  , { 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 0.390625, 0.625000, 1.000000, 2.560000, 1.600000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000 }
  }
, { { 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 1.600000, 1.600000, 0.625000, 1.000000, 0.625000, 1.600000, 0.625000, 0.625000, 0.390625, 0.625000, 0.625000, 0.625000, 1.000000 }
  , { 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 1.000000, 2.560000, 1.000000, 1.000000, 0.390625, 1.000000, 0.625000, 0.625000, 0.390625, 0.625000, 1.000000, 0.625000, 1.000000 }
  , { 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 2.560000, 1.600000, 0.625000, 0.625000, 0.625000, 1.600000, 0.625000, 0.625000, 0.390625, 0.244141, 0.625000, 0.625000, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 0.390625, 1.600000, 1.000000, 0.625000, 0.390625, 0.625000, 0.625000, 0.625000, 0.625000 }
  , { 0.625000, 1.000000, 0.625000, 0.625000, 0.625000, 1.600000, 1.600000, 0.390625, 1.000000, 0.625000, 2.560000, 0.625000, 0.625000, 0.390625, 0.625000, 0.625000, 0.390625, 1.000000 }
  , { 0.390625, 0.625000, 0.244141, 1.000000, 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 0.625000, 1.600000, 0.625000, 0.625000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000 }
  , { 0.390625, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.600000, 1.000000, 1.000000, 0.625000, 1.600000, 0.625000, 0.625000, 0.390625, 1.000000, 0.390625, 0.625000, 1.000000 }
  , { 0.390625, 1.000000, 0.625000, 1.000000, 0.390625, 1.600000, 1.000000, 0.625000, 1.000000, 0.390625, 2.560000, 0.390625, 0.625000, 0.390625, 0.625000, 1.000000, 0.390625, 1.600000 }
  , { 0.390625, 1.000000, 0.625000, 1.600000, 0.625000, 1.000000, 1.600000, 0.625000, 1.000000, 0.390625, 0.625000, 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 0.625000, 1.000000 }
  , { 0.390625, 1.600000, 0.625000, 1.000000, 0.625000, 0.625000, 1.600000, 0.625000, 1.600000, 0.625000, 1.600000, 0.625000, 0.244141, 0.244141, 0.625000, 0.625000, 0.625000, 1.000000 }
  , { 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 1.600000, 2.560000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 0.625000, 0.625000, 0.625000, 0.625000, 0.625000, 0.625000 }
  , { 0.625000, 1.000000, 0.625000, 0.390625, 0.625000, 1.600000, 1.600000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000, 0.244141, 0.625000, 0.390625, 0.625000, 1.600000 }
  , { 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 2.560000, 2.560000, 0.625000, 1.000000, 0.625000, 1.600000, 0.390625, 0.625000, 0.390625, 0.625000, 1.000000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 2.560000, 1.600000, 0.625000, 0.390625, 0.625000, 1.600000, 0.625000, 0.625000, 0.390625, 0.625000, 0.625000, 0.625000, 1.000000 }
  , { 0.390625, 1.000000, 0.625000, 1.000000, 0.390625, 1.000000, 1.600000, 0.625000, 1.000000, 0.390625, 2.560000, 0.625000, 0.625000, 0.244141, 1.000000, 0.625000, 0.625000, 1.000000 }
  , { 1.000000, 1.600000, 0.625000, 1.000000, 0.625000, 1.000000, 1.600000, 0.625000, 1.600000, 0.625000, 1.600000, 0.625000, 0.625000, 0.390625, 0.390625, 0.625000, 0.625000, 1.000000 }
  , { 0.625000, 1.000000, 0.625000, 1.000000, 0.625000, 2.560000, 1.000000, 0.390625, 1.000000, 1.000000, 2.560000, 0.625000, 0.390625, 0.244141, 0.625000, 0.625000, 1.000000, 1.600000 }
  , { 0.390625, 1.000000, 0.390625, 1.000000, 0.390625, 2.560000, 2.560000, 0.390625, 1.000000, 0.390625, 2.560000, 0.390625, 0.390625, 0.152588, 0.390625, 0.390625, 0.390625, 1.000000 }
  , { 0.625000, 1.000000, 0.625000, 1.600000, 0.625000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 0.390625, 0.625000, 0.390625, 0.625000, 0.625000, 0.390625, 0.625000 }
  }
, { { 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000 }
  , { 1.600000, 0.625000, 1.000000, 1.600000, 1.600000, 1.600000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 0.390625, 1.000000, 0.625000, 0.625000 }
  , { 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.390625 }
  , { 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 0.625000 }
  , { 0.625000, 0.625000, 0.390625, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 0.625000 }
  , { 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000, 0.625000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 0.390625, 1.000000 }
  , { 0.625000, 1.000000, 1.000000, 2.560000, 1.000000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000 }
  , { 0.625000, 1.600000, 1.000000, 1.600000, 1.000000, 0.390625, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 0.390625, 0.625000, 1.000000, 1.000000, 0.625000, 0.625000 }
  , { 1.600000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 1.000000, 1.000000, 0.625000, 0.390625 }
  , { 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 0.625000, 1.000000 }
  , { 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 0.625000, 1.000000, 0.390625, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000, 0.625000, 0.625000 }
  , { 0.625000, 1.000000, 1.000000, 1.600000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.600000, 0.625000, 1.000000, 0.625000, 1.600000, 1.000000, 0.625000, 0.625000 }
  , { 1.600000, 1.600000, 1.000000, 1.600000, 1.000000, 0.625000, 0.625000, 1.000000, 1.600000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 0.625000, 1.000000, 0.625000, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 1.600000, 1.000000, 1.600000, 0.390625, 0.625000, 1.000000, 2.560000, 1.600000, 0.625000, 0.625000, 0.625000, 1.000000, 1.000000, 1.000000, 1.000000 }
  , { 0.625000, 1.000000, 0.625000, 1.600000, 0.625000, 1.600000, 1.000000, 0.625000, 1.000000, 1.000000, 1.600000, 0.390625, 0.625000, 0.390625, 0.625000, 0.625000, 0.390625, 0.625000 }
  , { 1.000000, 1.000000, 1.000000, 2.560000, 1.000000, 1.000000, 0.390625, 1.000000, 1.000000, 2.560000, 1.000000, 0.390625, 1.000000, 1.000000, 1.000000, 1.000000, 0.390625, 0.390625 }
  }
};




static const float WEAK_DMG_MOD = 1.6;
static const float RESIST_DMG_MOD = 0.625;
static const float IMMUNE_DMG_MOD = RESIST_DMG_MOD * RESIST_DMG_MOD;
static const float STAB_DMG_MOD = 1.2;




typedef enum { PT_NONE , BUG , DARK , DRAGON , ELECTRIC , FAIRY , FIGHTING , FIRE , FLYING , GHOST , GRASS , GROUND , ICE , NORMAL , POISON , PSYCHIC , ROCK , STEEL , WATER } ptype_t; typedef enum { PT_NONE_M = ( ( ( !! ( PT_NONE ) ) << ( PT_NONE ) ) >> 1 ) , BUG_M = ( ( ( !! ( BUG ) ) << ( BUG ) ) >> 1 ) , DARK_M = ( ( ( !! ( DARK ) ) << ( DARK ) ) >> 1 ) , DRAGON_M = ( ( ( !! ( DRAGON ) ) << ( DRAGON ) ) >> 1 ) , ELECTRIC_M = ( ( ( !! ( ELECTRIC ) ) << ( ELECTRIC ) ) >> 1 ) , FAIRY_M = ( ( ( !! ( FAIRY ) ) << ( FAIRY ) ) >> 1 ) , FIGHTING_M = ( ( ( !! ( FIGHTING ) ) << ( FIGHTING ) ) >> 1 ) , FIRE_M = ( ( ( !! ( FIRE ) ) << ( FIRE ) ) >> 1 ) , FLYING_M = ( ( ( !! ( FLYING ) ) << ( FLYING ) ) >> 1 ) , GHOST_M = ( ( ( !! ( GHOST ) ) << ( GHOST ) ) >> 1 ) , GRASS_M = ( ( ( !! ( GRASS ) ) << ( GRASS ) ) >> 1 ) , GROUND_M = ( ( ( !! ( GROUND ) ) << ( GROUND ) ) >> 1 ) , ICE_M = ( ( ( !! ( ICE ) ) << ( ICE ) ) >> 1 ) , NORMAL_M = ( ( ( !! ( NORMAL ) ) << ( NORMAL ) ) >> 1 ) , POISON_M = ( ( ( !! ( POISON ) ) << ( POISON ) ) >> 1 ) , PSYCHIC_M = ( ( ( !! ( PSYCHIC ) ) << ( PSYCHIC ) ) >> 1 ) , ROCK_M = ( ( ( !! ( ROCK ) ) << ( ROCK ) ) >> 1 ) , STEEL_M = ( ( ( !! ( STEEL ) ) << ( STEEL ) ) >> 1 ) , WATER_M = ( ( ( !! ( WATER ) ) << ( WATER ) ) >> 1 ) } ptype_mask_t; typedef union { ptype_mask_t mask; struct { unsigned int BUG : 1 ; unsigned int DARK : 1 ; unsigned int DRAGON : 1 ; unsigned int ELECTRIC : 1 ; unsigned int FAIRY : 1 ; unsigned int FIGHTING : 1 ; unsigned int FIRE : 1 ; unsigned int FLYING : 1 ; unsigned int GHOST : 1 ; unsigned int GRASS : 1 ; unsigned int GROUND : 1 ; unsigned int ICE : 1 ; unsigned int NORMAL : 1 ; unsigned int POISON : 1 ; unsigned int PSYCHIC : 1 ; unsigned int ROCK : 1 ; unsigned int STEEL : 1 ; unsigned int WATER : 1; }; } ptype_flags_t;





static const uint8_t NUM_PTYPES = WATER + 1;

int fprint_ptype_mask( FILE * fd, const char * sep, ptype_mask_t pm );
struct ptype_traits_s {
  ptype_mask_t resistances : 18;
  ptype_mask_t weaknesses : 18;
  ptype_mask_t immunities : 18;
} ;

typedef struct ptype_traits_s ptype_traits_t;



static const ptype_traits_t ptype_traits[19] = {
                {
    .resistances = PT_NONE_M,
    .weaknesses = PT_NONE_M,
    .immunities = PT_NONE_M
  }, {
    .resistances = FIGHTING_M | GROUND_M | GRASS_M,
    .weaknesses = FLYING_M | ROCK_M | FIRE_M,
    .immunities = PT_NONE_M
  }, {
    .resistances = GHOST_M | DARK_M,
    .weaknesses = FIGHTING_M | FAIRY_M | BUG_M,
    .immunities = PSYCHIC_M
  }, {
    .resistances = FIRE_M | WATER_M | GRASS_M | ELECTRIC_M,
    .weaknesses = DRAGON_M | ICE_M | FAIRY_M,
    .immunities = PT_NONE_M
  }, {
    .resistances = FLYING_M | STEEL_M | ELECTRIC_M,
    .weaknesses = GROUND_M,
    .immunities = PT_NONE_M
  }, {
    .resistances = FIGHTING_M | BUG_M | DARK_M,
    .weaknesses = POISON_M | STEEL_M,
    .immunities = DRAGON_M
  }, {
    .resistances = ROCK_M | BUG_M | DARK_M,
    .weaknesses = FLYING_M | PSYCHIC_M | FAIRY_M,
    .immunities = PT_NONE_M
  }, {
    .resistances = BUG_M | STEEL_M | FIRE_M | GRASS_M | ICE_M | FAIRY_M,
    .weaknesses = GROUND_M | ROCK_M | WATER_M,
    .immunities = PT_NONE_M
  }, {
    .resistances = FIGHTING_M | BUG_M | GRASS_M,
    .weaknesses = ROCK_M | ELECTRIC_M | ICE_M,
    .immunities = GROUND_M
  }, {
    .resistances = POISON_M | BUG_M,
    .weaknesses = GHOST_M | DARK_M,
    .immunities = NORMAL_M | FIGHTING_M
  }, {
    .resistances = GROUND_M | WATER_M | GRASS_M | ELECTRIC_M,
    .weaknesses = FLYING_M | POISON_M | BUG_M | FIRE_M | ICE_M,
    .immunities = PT_NONE_M
  }, {
    .resistances = POISON_M | ROCK_M,
    .weaknesses = WATER_M | GRASS_M | ICE_M,
    .immunities = ELECTRIC_M
  }, {
    .resistances = ICE_M,
    .weaknesses = FIGHTING_M | FIRE_M | STEEL_M | ROCK_M,
    .immunities = PT_NONE_M
  }, {
    .resistances = PT_NONE_M,
    .weaknesses = FIGHTING_M,
    .immunities = GHOST_M
  }, {
    .resistances = FIGHTING_M | POISON_M | BUG_M | FAIRY_M | GRASS_M,
    .weaknesses = GROUND_M | PSYCHIC_M,
    .immunities = PT_NONE
  }, {
    .resistances = FIGHTING_M | PSYCHIC_M,
    .weaknesses = BUG_M | GHOST_M | DARK_M,
    .immunities = PT_NONE_M
  }, {
    .resistances = NORMAL_M | FLYING_M | POISON_M | FIRE_M,
    .weaknesses = FIGHTING_M | GROUND_M | STEEL_M | WATER_M | GRASS_M,
    .immunities = PT_NONE_M
  }, {
    .resistances = NORMAL_M | FLYING_M | ROCK_M | BUG_M | STEEL_M | GRASS_M |
                   PSYCHIC_M | ICE_M | DRAGON_M | FAIRY_M,
    .weaknesses = FIGHTING_M | GROUND_M | FIRE_M,
    .immunities = POISON_M
  }, {
    .resistances = STEEL_M | FIRE_M | WATER_M | ICE_M,
    .weaknesses = GRASS_M | ELECTRIC_M,
    .immunities = PT_NONE_M
  }
};




static const ptype_traits_t * PT_NONE_TRAITS = & ptype_traits[PT_NONE];
static const ptype_traits_t * BUG_TRAITS = & ptype_traits[BUG];
static const ptype_traits_t * DARK_TRAITS = & ptype_traits[DARK];
static const ptype_traits_t * DRAGON_TRAITS = & ptype_traits[DRAGON];
static const ptype_traits_t * ELECTRIC_TRAITS = & ptype_traits[ELECTRIC];
static const ptype_traits_t * FAIRY_TRAITS = & ptype_traits[FAIRY];
static const ptype_traits_t * FIGHTING_TRAITS = & ptype_traits[FIGHTING];
static const ptype_traits_t * FIRE_TRAITS = & ptype_traits[FIRE];
static const ptype_traits_t * FLYING_TRAITS = & ptype_traits[FLYING];
static const ptype_traits_t * GHOST_TRAITS = & ptype_traits[GHOST];
static const ptype_traits_t * GRASS_TRAITS = & ptype_traits[GRASS];
static const ptype_traits_t * GROUND_TRAITS = & ptype_traits[GROUND];
static const ptype_traits_t * ICE_TRAITS = & ptype_traits[ICE];
static const ptype_traits_t * NORMAL_TRAITS = & ptype_traits[NORMAL];
static const ptype_traits_t * POISON_TRAITS = & ptype_traits[POISON];
static const ptype_traits_t * PSYCHIC_TRAITS = & ptype_traits[PSYCHIC];
static const ptype_traits_t * ROCK_TRAITS = & ptype_traits[ROCK];
static const ptype_traits_t * STEEL_TRAITS = & ptype_traits[STEEL];
static const ptype_traits_t * WATER_TRAITS = & ptype_traits[WATER];







         float get_damage_modifier_mono( ptype_t def_type, ptype_t atk_type );
         float get_damage_modifier_duo( ptype_t def_type1,
                                        ptype_t def_type2,
                                        ptype_t atk_type
                                      );

         float get_damage_modifier( ptype_mask_t def_types, ptype_t atk_type );

         float
get_damage_modifier_flags( ptype_flags_t def_types, ptype_t atk_type );




  static inline bool
pt_resistp( ptype_t def, ptype_t atk )
{
  return ( !! ( ( ptype_traits[( ( def ) )].resistances ) &
                ( ( (ptype_mask_t) ( ( ( !! ( ( ( atk ) ) ) ) << ( ( ( atk ) ) ) ) >> 1 ) ) ) ) );
}

  static inline bool
pt_weakp( ptype_t def, ptype_t atk )
{
  return ( !! ( ( ptype_traits[( ( def ) )].weaknesses ) &
                ( ( (ptype_mask_t) ( ( ( !! ( ( ( atk ) ) ) ) << ( ( ( atk ) ) ) ) >> 1 ) ) ) ) );
}

  static inline bool
pt_immunep( ptype_t def, ptype_t atk )
{
  return ( !! ( ( ptype_traits[( ( def ) )].immunities ) &
                ( ( (ptype_mask_t) ( ( ( !! ( ( ( atk ) ) ) ) << ( ( ( atk ) ) ) ) >> 1 ) ) ) ) );
}




static const char * PTYPE_NAMES[] = {
  "NONE", "BUG", "DARK", "DRAGON", "ELECTRIC", "FAIRY", "FIGHTING", "FIRE",
  "FLYING", "GHOST", "GRASS", "GROUND", "ICE", "NORMAL", "POISON", "PSYCHIC",
  "ROCK", "STEEL", "WATER"
};







typedef enum {
  bc_1000, bc_0500, bc_0300, bc_0125, bc_0100, bc_0000
} buff_chance_t;




struct stat_buff_s {
  uint8_t target : 1;
  uint8_t debuffp : 1;
  uint8_t amount : 2;
} ;
typedef struct stat_buff_s stat_buff_t;


  static inline int8_t
decode_stat_buff( stat_buff_t buff )
{
  return buff.debuffp ? buff.amount : ( - buff.amount );
}




struct buff_s {
  buff_chance_t chance;
  stat_buff_t atk_buff;
  stat_buff_t def_buff;
} ;
typedef struct buff_s buff_t;


static const buff_t NO_BUFF = { .chance = bc_0000,
  .atk_buff = { .target = 0, .debuffp = 0, .amount = 0 },
  .def_buff = { .target = 0, .debuffp = 0, .amount = 0 }
};
static const float BUFF_MOD[] = {
  0.50000, 0.57143, 0.66667, 0.80000,
  1.00000,
  1.25000, 1.50000, 1.75000, 2.00000
};

typedef enum {
  B_4_8, B_4_7, B_4_6, B_4_5,
  B_4_4,
  B_5_4, B_6_4, B_7_4, B_8_4
} buff_level_t;




struct buff_state_s {
  buff_level_t atk_buff_lv;
  buff_level_t def_buff_lv;
} ;
typedef struct buff_state_s buff_state_t;

static const buff_state_t NO_BUFF_STATE = {
  .atk_buff_lv = B_4_4, .def_buff_lv = B_4_4
};



void apply_buff( buff_state_t * buff_state, buff_t buff );







struct base_move_s {
  uint16_t move_id;
  ptype_t type;
  bool is_fast : 1;
  uint8_t power;
  uint8_t energy;
} ;
typedef struct base_move_s base_move_t;

static const base_move_t NO_MOVE = {
  .move_id = 0,
  .type = PT_NONE,
  .is_fast = false,
  .power = 0,
  .energy = 0
};
struct pve_move_s {
  base_move_t;
  uint16_t cooldown;
} ;
typedef struct pve_move_s pve_move_t;

static const pve_move_t NO_MOVE_PVE = {
  NO_MOVE,
  .cooldown = 0
};

int pve_move_from_store( store_t * store,
                         uint16_t move_id,
                         pve_move_t * move
                       );




struct pvp_charged_move_s {
  base_move_t;
  buff_t buff;
} ;
typedef struct pvp_charged_move_s pvp_charged_move_t;

static const pvp_charged_move_t NO_MOVE_PVP_CHARGED = {
  NO_MOVE,
  .buff = NO_BUFF
};

int pvp_charged_move_from_store( store_t * store,
                                 uint16_t move_id,
                                 pvp_charged_move_t * move
                               );




struct pvp_fast_move_s {
  base_move_t;
  uint8_t turns : 2;
} ;
typedef struct pvp_fast_move_s pvp_fast_move_t;

static const pvp_fast_move_t NO_MOVE_PVP_FAST = { NO_MOVE, .turns = 0 };

int pvp_fast_move_from_store( store_t * store,
                              uint16_t move_id,
                              pvp_fast_move_t * move
                            );
struct store_move_s {
  char * name;
  ptype_t type;
  bool is_fast : 1;
  uint16_t move_id;
  uint16_t cooldown;
  uint8_t pve_power;
  uint8_t pvp_power;
  uint8_t pve_energy;
  uint8_t pvp_energy;
  buff_t buff;
  UT_hash_handle hh_name;
  UT_hash_handle hh_move_id;
};
typedef struct store_move_s store_move_t;

static const store_move_t NO_MOVE_STORE = {
  .name = NULL,
  .type = PT_NONE,
  .is_fast = false,
  .move_id = 0,
  .cooldown = 1,
  .pve_power = 1,
  .pvp_power = 1,
  .pve_energy = 1,
  .pvp_energy = 1,
  .buff = NO_BUFF,
  .hh_name = HH_NULL,
  .hh_move_id = HH_NULL
};




  static inline store_key_t
move_store_key( store_move_t * move )
{
  return (store_key_t) {
    .key_type = STORE_NUM,
    .val_type = STORE_MOVE,
    .data_h0 = move->move_id,
    .data_h1 = 0
  };
}

  static inline store_key_t
move_id_store_key( uint16_t move_id )
{
  return (store_key_t) {
    .key_type = STORE_NUM,
    .val_type = STORE_MOVE,
    .data_h0 = __extension__( { __auto_type _a = ( move_id ); __auto_type _b = ( - move_id ); _a > _b ? _a : _b; } ),
    .data_h1 = 0
  };
}




  static inline pve_move_t
pve_move_from_store_move( store_move_t * stored )
{
  assert( stored != NULL );
  pve_move_t move = {
    .move_id = stored->move_id,
    .type = stored->type,
    .is_fast = stored->is_fast,
    .power = stored->pve_power,
    .energy = stored->pve_energy,
    .cooldown = stored->cooldown
  };
  return move;
}

  static inline pvp_charged_move_t
pvp_charged_move_from_store_move( store_move_t * stored )
{
  assert( stored != NULL );
  pvp_charged_move_t move = {
    .move_id = stored->move_id,
    .type = stored->type,
    .is_fast = stored->is_fast,
    .power = stored->pvp_power,
    .energy = stored->pvp_energy,
    .buff = stored->buff
  };
  return move;
}

  static inline pvp_fast_move_t
pvp_fast_move_from_store_move( store_move_t * stored )
{
  assert( stored != NULL );
  pvp_fast_move_t move = {
    .move_id = stored->move_id,
    .type = stored->type,
    .is_fast = stored->is_fast,
    .power = stored->pvp_power,
    .energy = stored->pvp_energy,
    .turns = stored->cooldown
  };
  return move;
}




int fprint_buff( FILE * stream, const buff_t * buff );


int fprint_buff_json( FILE * stream, const buff_t * buff );


int fprint_buff_c( FILE * stream, const buff_t * buff );





int fprint_store_move( FILE * stream, const store_move_t * move );


int fprint_store_move_json( FILE * stream, const store_move_t * move );


int fprint_store_move_c( FILE * stream, const store_move_t * move );
static const uint16_t MAX_STAT = 999;

struct stats_s { uint16_t attack, stamina, defense; } ;
typedef struct stats_s stats_t;




typedef enum { TAG_NONE , TAG_LEGENDARY , TAG_MYTHIC , TAG_MEGA , TAG_SHADOW_ELIGABLE , TAG_SHADOW , TAG_PURE , TAG_ALOLAN , TAG_GALARIAN , TAG_STARTER , TAG_REGIONAL } pdex_tag_t; typedef enum { TAG_NONE_M = ( ( ( !! ( TAG_NONE ) ) << ( TAG_NONE ) ) >> 1 ) , TAG_LEGENDARY_M = ( ( ( !! ( TAG_LEGENDARY ) ) << ( TAG_LEGENDARY ) ) >> 1 ) , TAG_MYTHIC_M = ( ( ( !! ( TAG_MYTHIC ) ) << ( TAG_MYTHIC ) ) >> 1 ) , TAG_MEGA_M = ( ( ( !! ( TAG_MEGA ) ) << ( TAG_MEGA ) ) >> 1 ) , TAG_SHADOW_ELIGABLE_M = ( ( ( !! ( TAG_SHADOW_ELIGABLE ) ) << ( TAG_SHADOW_ELIGABLE ) ) >> 1 ) , TAG_SHADOW_M = ( ( ( !! ( TAG_SHADOW ) ) << ( TAG_SHADOW ) ) >> 1 ) , TAG_PURE_M = ( ( ( !! ( TAG_PURE ) ) << ( TAG_PURE ) ) >> 1 ) , TAG_ALOLAN_M = ( ( ( !! ( TAG_ALOLAN ) ) << ( TAG_ALOLAN ) ) >> 1 ) , TAG_GALARIAN_M = ( ( ( !! ( TAG_GALARIAN ) ) << ( TAG_GALARIAN ) ) >> 1 ) , TAG_STARTER_M = ( ( ( !! ( TAG_STARTER ) ) << ( TAG_STARTER ) ) >> 1 ) , TAG_REGIONAL_M = ( ( ( !! ( TAG_REGIONAL ) ) << ( TAG_REGIONAL ) ) >> 1 ) } pdex_tag_mask_t; typedef union { pdex_tag_mask_t mask; struct { unsigned int TAG_LEGENDARY : 1 ; unsigned int TAG_MYTHIC : 1 ; unsigned int TAG_MEGA : 1 ; unsigned int TAG_SHADOW_ELIGABLE : 1 ; unsigned int TAG_SHADOW : 1 ; unsigned int TAG_PURE : 1 ; unsigned int TAG_ALOLAN : 1 ; unsigned int TAG_GALARIAN : 1 ; unsigned int TAG_STARTER : 1 ; unsigned int TAG_REGIONAL : 1; }; } pdex_tag_flags_t;




static const uint8_t NUM_PDEX_TAGS = TAG_REGIONAL + 1;

static const char * PDEX_TAG_NAMES[] = {
  "NONE", "LEGENDARY", "MYTHIC", "MEGA", "SHADOW_ELIGABLE", "SHADOW", "PURE",
  "ALOLAN", "GALARIAN", "STARTER", "REGIONAL"
};





int fprint_pdex_tag_mask( FILE * fd, const char * sep, pdex_tag_mask_t tm );







struct region_s {
  char * name;
  uint16_t dex_start;
  uint16_t dex_end;
};
typedef struct region_s region_t;


static const region_t REGIONS[] = {
  { "Kanto", 1, 151 },
  { "Johto", 152, 251 },
  { "Hoenn", 252, 386 },
  { "Sinnoh", 387, 493 },
  { "Unova", 494, 649 },
  { "Kalos", 650, 718 },
  { "Unknown", 808, 809 }
};
typedef enum {
  R_KANTO = 0,
  R_JOHTO,
  R_HOENN,
  R_SINNOH,
  R_UNOVA,
  R_KALOS,
  R_UNKNOWN
} region_e;
static const region_t * REGION_KANTO = REGIONS + R_KANTO;
static const region_t * REGION_JOHTO = REGIONS + R_JOHTO;
static const region_t * REGION_HOENN = REGIONS + R_HOENN;
static const region_t * REGION_SINNOH = REGIONS + R_SINNOH;
static const region_t * REGION_UNOVA = REGIONS + R_UNOVA;
static const region_t * REGION_KALOS = REGIONS + R_KALOS;
static const region_t * REGION_UNKNOWN = REGIONS + R_UNKNOWN;


static const uint8_t NUM_REGIONS = ( sizeof( REGIONS ) / sizeof( ( REGIONS )[0] ) + ( sizeof( struct { int : -!!( __builtin_types_compatible_p( typeof( ( REGIONS ) ), typeof( &( REGIONS )[0] ) ) ); } ) ) );




struct pdex_mon_s {
  uint16_t dex_number;
  char * name;

  char * form_name;

  uint16_t family;
  ptype_mask_t types;
  stats_t base_stats;
  pdex_tag_mask_t tags;
  int16_t * fast_move_ids;
  uint8_t fast_moves_cnt;
  int16_t * charged_move_ids;
  uint8_t charged_moves_cnt;
  uint8_t form_idx;
  struct pdex_mon_s * next_form;

  UT_hash_handle hh_name;
  UT_hash_handle hh_dex_num;
};
typedef struct pdex_mon_s pdex_mon_t;

static const pdex_mon_t PDEX_NULL = {
  .dex_number = 0,
  .name = NULL,
  .form_name = NULL,
  .family = 0,
  .types = PT_NONE_M,
  .base_stats = { .attack = 0, .stamina = 0, .defense = 0 },
  .tags = TAG_NONE_M,
  .fast_move_ids = NULL,
  .fast_moves_cnt = 0,
  .charged_move_ids = NULL,
  .charged_moves_cnt = 0,
  .form_idx = 0,
  .hh_name = HH_NULL,
  .hh_dex_num = HH_NULL
};




static const uint16_t MAX_DEX = 865;

void pdex_mon_init( pdex_mon_t * mon,
                    uint16_t dex_num,
                    const char * name,
                    size_t name_len,
                    uint16_t family,
                    uint8_t form_num,
                    ptype_t type1,
                    ptype_t type2,
                    uint16_t stamina,
                    uint16_t attack,
                    uint16_t defense,
                    pdex_tag_mask_t tags,
                    int16_t * fast_move_ids,
                    uint8_t fast_moves_cnt,
                    int16_t * charged_move_ids,
                    uint8_t charged_moves_cnt
                  );
void pdex_mon_free( pdex_mon_t * mon );
  static inline store_key_t
pdex_store_key( pdex_mon_t * mon )
{
  return (store_key_t) {
    .key_type = STORE_NUM,
    .val_type = STORE_POKEDEX,
    .data_h0 = mon->dex_number,
    .data_q2 = mon->form_idx,
    .data_q3 = 0
  };
}

  static inline store_key_t
dex_form_store_key( uint16_t dex_num, uint8_t form_idx )
{
  return (store_key_t) {
    .key_type = STORE_NUM,
    .val_type = STORE_POKEDEX,
    .data_h0 = dex_num,
    .data_q2 = form_idx,
    .data_q3 = 0
  };
}




int fprint_pdex_mon( FILE * stream, const pdex_mon_t * mon );
int fprint_pdex_mon_json( FILE * stream, const pdex_mon_t * mon );
int fprint_pdex_mon_c( FILE * stream, const pdex_mon_t * mon );
int cmp_pdex_mon( pdex_mon_t * a, pdex_mon_t * b );
int cmp_pdex_mon_practical( pdex_mon_t * a, pdex_mon_t * b );




  static inline const region_t *
get_region( uint16_t dex_number )
{
  for ( uint8_t r = 0; r < NUM_REGIONS; r++ )
    {
      if ( __extension__( { __auto_type _lo = ( REGIONS[r].dex_start ); __auto_type _hi = ( REGIONS[r].dex_start ); __auto_type _x = ( dex_number ); _lo <= _x && _x <= _hi; } ) )
        {
          return REGIONS + r;
        }
    }
  return REGIONS + NUM_REGIONS - 1;
}




  static inline bool
is_starter( uint16_t dex_number )
{

  for ( uint8_t r = 0; r < NUM_REGIONS - 1; r++ )
    {
      if ( __extension__( { __auto_type _lo = ( REGIONS[r].dex_start ); __auto_type _hi = ( REGIONS[r].dex_start ); __auto_type _x = ( dex_number ); _lo <= _x && _x <= _hi; } ) )
        {
          return true;
        }
    }
  return false;
}
static const uint16_t REGIONALS[] = { 83, 115, 122, 128, 214, 222, 313, 314, 324, 335, 336, 337, 338, 357, 369, 417, 441, 511, 512, 513, 514, 515, 516, 550, 556, 561, 626, 631, 632 };
static const uint8_t NUM_REGIONALS = ( sizeof( REGIONALS ) / sizeof( ( REGIONALS )[0] ) + ( sizeof( struct { int : -!!( __builtin_types_compatible_p( typeof( ( REGIONALS ) ), typeof( &( REGIONALS )[0] ) ) ); } ) ) );

  static inline bool
is_regional( uint16_t dex_number )
{
  for ( uint8_t i = 0; i < NUM_REGIONALS; i++ )
    {
      if ( REGIONALS[i] == dex_number ) return true;
    }
  return false;
}








struct cstore_aux_s {
  uint16_t mons_cnt;
  uint16_t moves_cnt;
  pdex_mon_t * mons_by_name;
  store_move_t * moves_by_id;
  store_move_t * moves_by_name;
};
typedef struct cstore_aux_s cstore_aux_t;



typedef store_t cstore_t;




bool cstore_has( store_t * cstore, store_key_t key );
int cstore_get( store_t * cstore, store_key_t key, void ** val );
int cstore_get_str( store_t * cstore, const char *, void ** val );
int cstore_get_str_t( store_t * cstore,
                       store_type_t val_type,
                       const char * key,
                       void ** val
                     );
int cstore_init( store_t * cstore, void * pokedex );
void cstore_free( store_t * cstore );




int cstore_get_pokemon( cstore_t * cstore,
                        uint16_t dex_num,
                        uint8_t form_idx,
                        pdex_mon_t ** mon
                      );

int cstore_get_pokemon_by_name( cstore_t * cstore,
                                const char * name,
                                pdex_mon_t ** mon
                              );




int cstore_get_move( cstore_t * cstore,
                     uint16_t move_id,
                     store_move_t ** move
                   );

int cstore_get_move_by_name( cstore_t * cstore,
                             const char * name,
                             store_move_t ** move
                           );



  static inline int
cstore_export( store_t * cstore,
               store_sink_t sink_type,
               void * target
             )
{
  return STORE_ERROR_NOT_DEFINED;
}

  static inline int
cstore_add( store_t * cstore, store_key_t key, void * val )
{
  return STORE_ERROR_NOT_WRITABLE;
}

  static inline int
cstore_set( store_t * cstore, store_key_t key, void * val )
{
  return STORE_ERROR_NOT_WRITABLE;
}
